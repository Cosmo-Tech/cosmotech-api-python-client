# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScenarioRunSearch(BaseModel):
    """
    the search options
    """ # noqa: E501
    solution_id: Optional[StrictStr] = Field(default=None, description="the Solution Id to search", alias="solutionId")
    run_template_id: Optional[StrictStr] = Field(default=None, description="the Solution Analysis Id to search", alias="runTemplateId")
    workspace_id: Optional[StrictStr] = Field(default=None, description="the Workspace Id to search", alias="workspaceId")
    scenario_id: Optional[StrictStr] = Field(default=None, description="the Scenario Id to search", alias="scenarioId")
    state: Optional[StrictStr] = Field(default=None, description="the state to search")
    workflow_id: Optional[StrictStr] = Field(default=None, description="the Cosmo Tech compute cluster Argo Workflow Id to search", alias="workflowId")
    workflow_name: Optional[StrictStr] = Field(default=None, description="the Cosmo Tech compute cluster Argo Workflow Name", alias="workflowName")
    owner_id: Optional[StrictStr] = Field(default=None, description="the owner Id to search", alias="ownerId")
    __properties: ClassVar[List[str]] = ["solutionId", "runTemplateId", "workspaceId", "scenarioId", "state", "workflowId", "workflowName", "ownerId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FetchingDatasets', 'FetchingScenarioParameters', 'ApplyingScenarioParameters', 'ValidatingScenarioData', 'SendingScenarioDataToDataWarehouse', 'PreRun', 'Running', 'PostRun', 'Success', 'Failed']):
            raise ValueError("must be one of enum values ('FetchingDatasets', 'FetchingScenarioParameters', 'ApplyingScenarioParameters', 'ValidatingScenarioData', 'SendingScenarioDataToDataWarehouse', 'PreRun', 'Running', 'PostRun', 'Success', 'Failed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScenarioRunSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScenarioRunSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "solutionId": obj.get("solutionId"),
            "runTemplateId": obj.get("runTemplateId"),
            "workspaceId": obj.get("workspaceId"),
            "scenarioId": obj.get("scenarioId"),
            "state": obj.get("state"),
            "workflowId": obj.get("workflowId"),
            "workflowName": obj.get("workflowName"),
            "ownerId": obj.get("ownerId")
        })
        return _obj


