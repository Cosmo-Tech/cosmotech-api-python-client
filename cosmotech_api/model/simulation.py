"""
    Cosmo Tech Plaform API

    Cosmo Tech Platform API  # noqa: E501

    The version of the OpenAPI document: 0.0.1-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cosmotech_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from cosmotech_api.model.simulation_all_of import SimulationAllOf
    from cosmotech_api.model.simulation_analysis_parameter_value import SimulationAnalysisParameterValue
    from cosmotech_api.model.simulation_base import SimulationBase
    from cosmotech_api.model.simulation_containers import SimulationContainers
    globals()['SimulationAllOf'] = SimulationAllOf
    globals()['SimulationAnalysisParameterValue'] = SimulationAnalysisParameterValue
    globals()['SimulationBase'] = SimulationBase
    globals()['SimulationContainers'] = SimulationContainers


class Simulation(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'job_id': (str,),  # noqa: E501
            'owner_id': (str,),  # noqa: E501
            'workspace_id': (str,),  # noqa: E501
            'workspace_name': (str,),  # noqa: E501
            'scenario_id': (str,),  # noqa: E501
            'scenario_name': (str,),  # noqa: E501
            'simulator_id': (str,),  # noqa: E501
            'simulator_name': (str,),  # noqa: E501
            'simulator_version': (str,),  # noqa: E501
            'simulator_analysis_id': (str,),  # noqa: E501
            'simulator_analysis_name': (str,),  # noqa: E501
            'compute_size': (str,),  # noqa: E501
            'state': (str,),  # noqa: E501
            'start_time': (str,),  # noqa: E501
            'end_time': (str,),  # noqa: E501
            'dataset_list': ([str],),  # noqa: E501
            'parameters_values': ([SimulationAnalysisParameterValue],),  # noqa: E501
            'send_input_to_data_warehouse': (bool,),  # noqa: E501
            'data_warehouse_db': (str,),  # noqa: E501
            'results_event_bus_resource_uri': (str,),  # noqa: E501
            'simulation_event_bus_resource_uri': (str,),  # noqa: E501
            'node_label': (str,),  # noqa: E501
            'init_containers': ([SimulationContainers],),  # noqa: E501
            'main_container': (SimulationContainers,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'job_id': 'jobId',  # noqa: E501
        'owner_id': 'ownerId',  # noqa: E501
        'workspace_id': 'workspaceId',  # noqa: E501
        'workspace_name': 'workspaceName',  # noqa: E501
        'scenario_id': 'scenarioId',  # noqa: E501
        'scenario_name': 'scenarioName',  # noqa: E501
        'simulator_id': 'simulatorId',  # noqa: E501
        'simulator_name': 'simulatorName',  # noqa: E501
        'simulator_version': 'simulatorVersion',  # noqa: E501
        'simulator_analysis_id': 'simulatorAnalysisId',  # noqa: E501
        'simulator_analysis_name': 'simulatorAnalysisName',  # noqa: E501
        'compute_size': 'computeSize',  # noqa: E501
        'state': 'state',  # noqa: E501
        'start_time': 'startTime',  # noqa: E501
        'end_time': 'endTime',  # noqa: E501
        'dataset_list': 'datasetList',  # noqa: E501
        'parameters_values': 'parametersValues',  # noqa: E501
        'send_input_to_data_warehouse': 'sendInputToDataWarehouse',  # noqa: E501
        'data_warehouse_db': 'dataWarehouseDB',  # noqa: E501
        'results_event_bus_resource_uri': 'resultsEventBusResourceUri',  # noqa: E501
        'simulation_event_bus_resource_uri': 'simulationEventBusResourceUri',  # noqa: E501
        'node_label': 'nodeLabel',  # noqa: E501
        'init_containers': 'initContainers',  # noqa: E501
        'main_container': 'mainContainer',  # noqa: E501
    }

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Simulation - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): the Simulation. [optional]  # noqa: E501
            job_id (str): the Platform compute cluster Job Id. [optional]  # noqa: E501
            owner_id (str): the user id which own this simulation. [optional]  # noqa: E501
            workspace_id (str): the Workspace Id. [optional]  # noqa: E501
            workspace_name (str): the Workspace name. [optional]  # noqa: E501
            scenario_id (str): the Scenario Id. [optional]  # noqa: E501
            scenario_name (str): the Scenario name. [optional]  # noqa: E501
            simulator_id (str): the Simulator Id. [optional]  # noqa: E501
            simulator_name (str): the Simulator name. [optional]  # noqa: E501
            simulator_version (str): the Simulator version. [optional]  # noqa: E501
            simulator_analysis_id (str): the Simulator Analysis id. [optional]  # noqa: E501
            simulator_analysis_name (str): the Simulator Analysis name. [optional]  # noqa: E501
            compute_size (str): the compute size needed for this Analysis. Standard sizes are basic and highcpu. Default is basic. [optional]  # noqa: E501
            state (str): the Simulation state. [optional]  # noqa: E501
            start_time (str): the Simulation start Date Time. [optional]  # noqa: E501
            end_time (str): the Simulation end Date Time. [optional]  # noqa: E501
            dataset_list ([str]): the list of Dataset Id associated to this Analysis. [optional]  # noqa: E501
            parameters_values ([SimulationAnalysisParameterValue]): the list of Simulator Analysis parameters values. [optional]  # noqa: E501
            send_input_to_data_warehouse (bool): whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run. [optional]  # noqa: E501
            data_warehouse_db (str): the DataWarehouse database name to send data if sendInputToDataWarehouse is set. [optional]  # noqa: E501
            results_event_bus_resource_uri (str): the event bus which receive Workspace Simulation results messages. Message won't be send if this is not set. [optional]  # noqa: E501
            simulation_event_bus_resource_uri (str): the event bus which receive Workspace Simulation events messages. Message won't be send if this is not set. [optional]  # noqa: E501
            node_label (str): the node label request. [optional]  # noqa: E501
            init_containers ([SimulationContainers]): the list of init containers. [optional]  # noqa: E501
            main_container (SimulationContainers): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
        }
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(
            constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if var_name in unused_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        not self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              SimulationAllOf,
              SimulationBase,
          ],
          'oneOf': [
          ],
        }
