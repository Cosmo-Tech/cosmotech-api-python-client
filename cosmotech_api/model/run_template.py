"""
    Cosmo Tech Plaform API

    Cosmo Tech Platform API  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: platform@cosmotech.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cosmotech_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from cosmotech_api.exceptions import ApiAttributeError


def lazy_import():
    from cosmotech_api.model.delete_historical_data import DeleteHistoricalData
    from cosmotech_api.model.run_template_resource_sizing import RunTemplateResourceSizing
    from cosmotech_api.model.run_template_step_source import RunTemplateStepSource
    globals()['DeleteHistoricalData'] = DeleteHistoricalData
    globals()['RunTemplateResourceSizing'] = RunTemplateResourceSizing
    globals()['RunTemplateStepSource'] = RunTemplateStepSource


class RunTemplate(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'csm_simulation': (str,),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'compute_size': (str,),  # noqa: E501
            'run_sizing': (RunTemplateResourceSizing,),  # noqa: E501
            'no_data_ingestion_state': (bool,),  # noqa: E501
            'fetch_datasets': (bool,),  # noqa: E501
            'scenario_data_download_transform': (bool,),  # noqa: E501
            'fetch_scenario_parameters': (bool,),  # noqa: E501
            'apply_parameters': (bool,),  # noqa: E501
            'validate_data': (bool,),  # noqa: E501
            'send_datasets_to_data_warehouse': (bool,),  # noqa: E501
            'send_input_parameters_to_data_warehouse': (bool,),  # noqa: E501
            'pre_run': (bool,),  # noqa: E501
            'run': (bool,),  # noqa: E501
            'post_run': (bool,),  # noqa: E501
            'parameters_json': (bool,),  # noqa: E501
            'parameters_handler_source': (RunTemplateStepSource,),  # noqa: E501
            'dataset_validator_source': (RunTemplateStepSource,),  # noqa: E501
            'pre_run_source': (RunTemplateStepSource,),  # noqa: E501
            'run_source': (RunTemplateStepSource,),  # noqa: E501
            'post_run_source': (RunTemplateStepSource,),  # noqa: E501
            'scenariodata_transform_source': (RunTemplateStepSource,),  # noqa: E501
            'parameter_groups': ([str],),  # noqa: E501
            'stack_steps': (bool,),  # noqa: E501
            'git_repository_url': (str,),  # noqa: E501
            'git_branch_name': (str,),  # noqa: E501
            'run_template_source_dir': (str,),  # noqa: E501
            'execution_timeout': (int,),  # noqa: E501
            'delete_historical_data': (DeleteHistoricalData,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'description': 'description',  # noqa: E501
        'csm_simulation': 'csmSimulation',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'compute_size': 'computeSize',  # noqa: E501
        'run_sizing': 'runSizing',  # noqa: E501
        'no_data_ingestion_state': 'noDataIngestionState',  # noqa: E501
        'fetch_datasets': 'fetchDatasets',  # noqa: E501
        'scenario_data_download_transform': 'scenarioDataDownloadTransform',  # noqa: E501
        'fetch_scenario_parameters': 'fetchScenarioParameters',  # noqa: E501
        'apply_parameters': 'applyParameters',  # noqa: E501
        'validate_data': 'validateData',  # noqa: E501
        'send_datasets_to_data_warehouse': 'sendDatasetsToDataWarehouse',  # noqa: E501
        'send_input_parameters_to_data_warehouse': 'sendInputParametersToDataWarehouse',  # noqa: E501
        'pre_run': 'preRun',  # noqa: E501
        'run': 'run',  # noqa: E501
        'post_run': 'postRun',  # noqa: E501
        'parameters_json': 'parametersJson',  # noqa: E501
        'parameters_handler_source': 'parametersHandlerSource',  # noqa: E501
        'dataset_validator_source': 'datasetValidatorSource',  # noqa: E501
        'pre_run_source': 'preRunSource',  # noqa: E501
        'run_source': 'runSource',  # noqa: E501
        'post_run_source': 'postRunSource',  # noqa: E501
        'scenariodata_transform_source': 'scenariodataTransformSource',  # noqa: E501
        'parameter_groups': 'parameterGroups',  # noqa: E501
        'stack_steps': 'stackSteps',  # noqa: E501
        'git_repository_url': 'gitRepositoryUrl',  # noqa: E501
        'git_branch_name': 'gitBranchName',  # noqa: E501
        'run_template_source_dir': 'runTemplateSourceDir',  # noqa: E501
        'execution_timeout': 'executionTimeout',  # noqa: E501
        'delete_historical_data': 'deleteHistoricalData',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, *args, **kwargs):  # noqa: E501
        """RunTemplate - a model defined in OpenAPI

        Args:
            id (str): the Solution Run Template id

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): the Run Template name. [optional]  # noqa: E501
            description (str): the Run Template description. [optional]  # noqa: E501
            csm_simulation (str): the Cosmo Tech simulation name. This information is send to the Engine. Mandatory information if no Engine is defined. [optional]  # noqa: E501
            tags ([str]): the list of Run Template tags. [optional]  # noqa: E501
            compute_size (str): the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic. [optional]  # noqa: E501
            run_sizing (RunTemplateResourceSizing): [optional]  # noqa: E501
            no_data_ingestion_state (bool): set to true if the run template does not want to check data ingestion state (no probes or not control plane). [optional]  # noqa: E501
            fetch_datasets (bool): whether or not the fetch dataset step is done. [optional]  # noqa: E501
            scenario_data_download_transform (bool): whether or not the scenario data download transform step step is done. [optional]  # noqa: E501
            fetch_scenario_parameters (bool): whether or not the fetch parameters step is done. [optional]  # noqa: E501
            apply_parameters (bool): whether or not the apply parameter step is done. [optional]  # noqa: E501
            validate_data (bool): whether or not the validate step is done. [optional]  # noqa: E501
            send_datasets_to_data_warehouse (bool): whether or not the Datasets values are send to the DataWarehouse prior to Simulation Run. If not set follow the Workspace setting. [optional]  # noqa: E501
            send_input_parameters_to_data_warehouse (bool): whether or not the input parameters values are send to the DataWarehouse prior to Simulation Run. If not set follow the Workspace setting. [optional]  # noqa: E501
            pre_run (bool): whether or not the pre-run step is done. [optional]  # noqa: E501
            run (bool): whether or not the run step is done. [optional]  # noqa: E501
            post_run (bool): whether or not the post-run step is done. [optional]  # noqa: E501
            parameters_json (bool): whether or not to store the scenario parameters in json instead of csv. [optional]  # noqa: E501
            parameters_handler_source (RunTemplateStepSource): [optional]  # noqa: E501
            dataset_validator_source (RunTemplateStepSource): [optional]  # noqa: E501
            pre_run_source (RunTemplateStepSource): [optional]  # noqa: E501
            run_source (RunTemplateStepSource): [optional]  # noqa: E501
            post_run_source (RunTemplateStepSource): [optional]  # noqa: E501
            scenariodata_transform_source (RunTemplateStepSource): [optional]  # noqa: E501
            parameter_groups ([str]): the ordered list of parameters groups for the Run Template. [optional]  # noqa: E501
            stack_steps (bool): whether or not to stack adjacent scenario run steps in one container run which will chain steps. [optional]  # noqa: E501
            git_repository_url (str): an optional URL to the git repository. [optional]  # noqa: E501
            git_branch_name (str): an optional git branch name. [optional]  # noqa: E501
            run_template_source_dir (str): an optional directory where to find the run template source. [optional]  # noqa: E501
            execution_timeout (int): an optional duration in seconds in which a workflow is allowed to run. [optional]  # noqa: E501
            delete_historical_data (DeleteHistoricalData): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, *args, **kwargs):  # noqa: E501
        """RunTemplate - a model defined in OpenAPI

        Args:
            id (str): the Solution Run Template id

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): the Run Template name. [optional]  # noqa: E501
            description (str): the Run Template description. [optional]  # noqa: E501
            csm_simulation (str): the Cosmo Tech simulation name. This information is send to the Engine. Mandatory information if no Engine is defined. [optional]  # noqa: E501
            tags ([str]): the list of Run Template tags. [optional]  # noqa: E501
            compute_size (str): the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic. [optional]  # noqa: E501
            run_sizing (RunTemplateResourceSizing): [optional]  # noqa: E501
            no_data_ingestion_state (bool): set to true if the run template does not want to check data ingestion state (no probes or not control plane). [optional]  # noqa: E501
            fetch_datasets (bool): whether or not the fetch dataset step is done. [optional]  # noqa: E501
            scenario_data_download_transform (bool): whether or not the scenario data download transform step step is done. [optional]  # noqa: E501
            fetch_scenario_parameters (bool): whether or not the fetch parameters step is done. [optional]  # noqa: E501
            apply_parameters (bool): whether or not the apply parameter step is done. [optional]  # noqa: E501
            validate_data (bool): whether or not the validate step is done. [optional]  # noqa: E501
            send_datasets_to_data_warehouse (bool): whether or not the Datasets values are send to the DataWarehouse prior to Simulation Run. If not set follow the Workspace setting. [optional]  # noqa: E501
            send_input_parameters_to_data_warehouse (bool): whether or not the input parameters values are send to the DataWarehouse prior to Simulation Run. If not set follow the Workspace setting. [optional]  # noqa: E501
            pre_run (bool): whether or not the pre-run step is done. [optional]  # noqa: E501
            run (bool): whether or not the run step is done. [optional]  # noqa: E501
            post_run (bool): whether or not the post-run step is done. [optional]  # noqa: E501
            parameters_json (bool): whether or not to store the scenario parameters in json instead of csv. [optional]  # noqa: E501
            parameters_handler_source (RunTemplateStepSource): [optional]  # noqa: E501
            dataset_validator_source (RunTemplateStepSource): [optional]  # noqa: E501
            pre_run_source (RunTemplateStepSource): [optional]  # noqa: E501
            run_source (RunTemplateStepSource): [optional]  # noqa: E501
            post_run_source (RunTemplateStepSource): [optional]  # noqa: E501
            scenariodata_transform_source (RunTemplateStepSource): [optional]  # noqa: E501
            parameter_groups ([str]): the ordered list of parameters groups for the Run Template. [optional]  # noqa: E501
            stack_steps (bool): whether or not to stack adjacent scenario run steps in one container run which will chain steps. [optional]  # noqa: E501
            git_repository_url (str): an optional URL to the git repository. [optional]  # noqa: E501
            git_branch_name (str): an optional git branch name. [optional]  # noqa: E501
            run_template_source_dir (str): an optional directory where to find the run template source. [optional]  # noqa: E501
            execution_timeout (int): an optional duration in seconds in which a workflow is allowed to run. [optional]  # noqa: E501
            delete_historical_data (DeleteHistoricalData): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
