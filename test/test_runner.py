# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 5.0.0-beta3
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.runner import Runner

class TestRunner(unittest.TestCase):
    """Runner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Runner:
        """Test Runner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Runner`
        """
        model = Runner()
        if include_optional:
            return Runner(
                id = '',
                name = '',
                description = '',
                tags = [
                    ''
                    ],
                parent_id = '',
                create_info = cosmotech_api.models.runner_edit_info.RunnerEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                update_info = cosmotech_api.models.runner_edit_info.RunnerEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                root_id = '',
                solution_id = '',
                run_template_id = '',
                organization_id = '',
                workspace_id = '',
                owner_name = '',
                solution_name = '',
                run_template_name = '',
                dataset_list = [
                    ''
                    ],
                run_sizing = cosmotech_api.models.runner_resource_sizing.RunnerResourceSizing(
                    requests = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                        cpu = '', 
                        memory = '', ), 
                    limits = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                        cpu = '', 
                        memory = '', ), ),
                parameters_values = [
                    cosmotech_api.models.runner_run_template_parameter_value.RunnerRunTemplateParameterValue(
                        parameter_id = '', 
                        var_type = '', 
                        value = '', 
                        is_inherited = True, )
                    ],
                last_run_info = cosmotech_api.models.last_run_info.LastRunInfo(
                    last_run_id = '', 
                    last_run_status = 'NotStarted', ),
                validation_status = 'Draft',
                security = cosmotech_api.models.runner_security.RunnerSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.runner_access_control.RunnerAccessControl(
                            id = '', 
                            role = '', )
                        ], )
            )
        else:
            return Runner(
                id = '',
                name = '',
                create_info = cosmotech_api.models.runner_edit_info.RunnerEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                update_info = cosmotech_api.models.runner_edit_info.RunnerEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                solution_id = '',
                run_template_id = '',
                organization_id = '',
                workspace_id = '',
                owner_name = '',
                dataset_list = [
                    ''
                    ],
                parameters_values = [
                    cosmotech_api.models.runner_run_template_parameter_value.RunnerRunTemplateParameterValue(
                        parameter_id = '', 
                        var_type = '', 
                        value = '', 
                        is_inherited = True, )
                    ],
                last_run_info = cosmotech_api.models.last_run_info.LastRunInfo(
                    last_run_id = '', 
                    last_run_status = 'NotStarted', ),
                validation_status = 'Draft',
                security = cosmotech_api.models.runner_security.RunnerSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.runner_access_control.RunnerAccessControl(
                            id = '', 
                            role = '', )
                        ], ),
        )
        """

    def testRunner(self):
        """Test Runner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
