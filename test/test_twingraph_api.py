# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.2.0
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.api.twingraph_api import TwingraphApi


class TestTwingraphApi(unittest.TestCase):
    """TwingraphApi unit test stubs"""

    def setUp(self) -> None:
        self.api = TwingraphApi()

    def tearDown(self) -> None:
        pass

    def test_batch_query(self) -> None:
        """Test case for batch_query

        Run a query on a graph instance and return the result as a zip file in async mode
        """
        pass

    def test_batch_upload_update(self) -> None:
        """Test case for batch_upload_update

        Async batch update by loading a CSV file on a graph instance 
        """
        pass

    def test_create_entities(self) -> None:
        """Test case for create_entities

        Create new entities in a graph instance
        """
        pass

    def test_create_graph(self) -> None:
        """Test case for create_graph

        Create a new graph
        """
        pass

    def test_delete(self) -> None:
        """Test case for delete

        Delete all versions of a graph and his metadatas
        """
        pass

    def test_delete_entities(self) -> None:
        """Test case for delete_entities

        Delete entities in a graph instance
        """
        pass

    def test_download_graph(self) -> None:
        """Test case for download_graph

        Download a graph compressed in a zip file
        """
        pass

    def test_find_all_twingraphs(self) -> None:
        """Test case for find_all_twingraphs

        Return the list of all graphs stored in the organization
        """
        pass

    def test_get_entities(self) -> None:
        """Test case for get_entities

        Get entities in a graph instance
        """
        pass

    def test_get_graph_meta_data(self) -> None:
        """Test case for get_graph_meta_data

        Return the metaData of the specified graph
        """
        pass

    def test_job_status(self) -> None:
        """Test case for job_status

        Get the status of a job
        """
        pass

    def test_query(self) -> None:
        """Test case for query

        Run a query on a graph instance
        """
        pass

    def test_update_entities(self) -> None:
        """Test case for update_entities

        Update entities in a graph instance
        """
        pass

    def test_update_graph_meta_data(self) -> None:
        """Test case for update_graph_meta_data

        Update the metaData of the specified graph
        """
        pass


if __name__ == '__main__':
    unittest.main()
