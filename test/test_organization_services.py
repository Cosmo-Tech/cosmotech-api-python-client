# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.2.0
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.organization_services import OrganizationServices

class TestOrganizationServices(unittest.TestCase):
    """OrganizationServices unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrganizationServices:
        """Test OrganizationServices
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrganizationServices`
        """
        model = OrganizationServices()
        if include_optional:
            return OrganizationServices(
                tenant_credentials = { },
                storage = cosmotech_api.models.organization_service.OrganizationService(
                    cloud_service = '', 
                    base_uri = '', 
                    platform_service = '', 
                    resource_uri = '', 
                    credentials = { }, ),
                solutions_container_registry = cosmotech_api.models.organization_service.OrganizationService(
                    cloud_service = '', 
                    base_uri = '', 
                    platform_service = '', 
                    resource_uri = '', 
                    credentials = { }, )
            )
        else:
            return OrganizationServices(
        )
        """

    def testOrganizationServices(self):
        """Test OrganizationServices"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
