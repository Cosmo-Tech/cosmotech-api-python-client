# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.workspace import Workspace

class TestWorkspace(unittest.TestCase):
    """Workspace unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Workspace:
        """Test Workspace
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Workspace`
        """
        model = Workspace()
        if include_optional:
            return Workspace(
                id = 'w-0123456789ab',
                organization_id = 'o-0123456789ab',
                key = 'MyKey',
                name = 'FranceOffice',
                description = '',
                linked_dataset_id_list = [
                    ''
                    ],
                version = '1.0.0',
                tags = [
                    ''
                    ],
                owner_id = '',
                solution = cosmotech_api.models.workspace_solution.WorkspaceSolution(
                    solution_id = '', 
                    run_template_filter = [
                        ''
                        ], 
                    default_run_template_dataset = { }, ),
                web_app = cosmotech_api.models.workspace_web_app.WorkspaceWebApp(
                    url = '', 
                    iframes = { }, 
                    options = { }, ),
                send_input_to_data_warehouse = True,
                use_dedicated_event_hub_namespace = True,
                dedicated_event_hub_sas_key_name = '',
                dedicated_event_hub_authentication_strategy = '',
                send_scenario_run_to_event_hub = True,
                send_scenario_metadata_to_event_hub = True,
                dataset_copy = True,
                security = cosmotech_api.models.workspace_security.WorkspaceSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.workspace_access_control.WorkspaceAccessControl(
                            id = '', 
                            role = '', )
                        ], )
            )
        else:
            return Workspace(
                key = 'MyKey',
                name = 'FranceOffice',
                solution = cosmotech_api.models.workspace_solution.WorkspaceSolution(
                    solution_id = '', 
                    run_template_filter = [
                        ''
                        ], 
                    default_run_template_dataset = { }, ),
        )
        """

    def testWorkspace(self):
        """Test Workspace"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
