# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 5.0.0-beta3
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.api.dataset_api import DatasetApi


class TestDatasetApi(unittest.TestCase):
    """DatasetApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DatasetApi()

    def tearDown(self) -> None:
        pass

    def test_create_dataset(self) -> None:
        """Test case for create_dataset

        Create a Dataset
        """
        pass

    def test_create_dataset_access_control(self) -> None:
        """Test case for create_dataset_access_control

        Add a control access to the Dataset
        """
        pass

    def test_create_dataset_part(self) -> None:
        """Test case for create_dataset_part

        Create a data part of a Dataset
        """
        pass

    def test_delete_dataset(self) -> None:
        """Test case for delete_dataset

        Delete a Dataset
        """
        pass

    def test_delete_dataset_access_control(self) -> None:
        """Test case for delete_dataset_access_control

        Remove the specified access from the given Dataset
        """
        pass

    def test_delete_dataset_part(self) -> None:
        """Test case for delete_dataset_part

        Delete a Dataset part
        """
        pass

    def test_download_dataset_part(self) -> None:
        """Test case for download_dataset_part

        Download data from a dataset part
        """
        pass

    def test_get_dataset(self) -> None:
        """Test case for get_dataset

        Retrieve a Dataset
        """
        pass

    def test_get_dataset_access_control(self) -> None:
        """Test case for get_dataset_access_control

        Get a control access for the Dataset
        """
        pass

    def test_get_dataset_part(self) -> None:
        """Test case for get_dataset_part

        Retrieve a data part of a Dataset
        """
        pass

    def test_list_dataset_parts(self) -> None:
        """Test case for list_dataset_parts

        Retrieve all dataset parts of a Dataset
        """
        pass

    def test_list_dataset_security_users(self) -> None:
        """Test case for list_dataset_security_users

        Get the Dataset security users list
        """
        pass

    def test_list_datasets(self) -> None:
        """Test case for list_datasets

        Retrieve a list of defined Dataset
        """
        pass

    def test_query_data(self) -> None:
        """Test case for query_data

        Get data of a Dataset
        """
        pass

    def test_replace_dataset_part(self) -> None:
        """Test case for replace_dataset_part

        Replace existing dataset parts of a Dataset
        """
        pass

    def test_search_dataset_parts(self) -> None:
        """Test case for search_dataset_parts

        Search Dataset parts by tags
        """
        pass

    def test_search_datasets(self) -> None:
        """Test case for search_datasets

        Search Datasets by tags
        """
        pass

    def test_update_dataset(self) -> None:
        """Test case for update_dataset

        Update a Dataset
        """
        pass

    def test_update_dataset_access_control(self) -> None:
        """Test case for update_dataset_access_control

        Update the specified access to User for a Dataset
        """
        pass

    def test_update_dataset_default_security(self) -> None:
        """Test case for update_dataset_default_security

        Set the Dataset default security
        """
        pass


if __name__ == '__main__':
    unittest.main()
