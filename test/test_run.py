# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.run import Run

class TestRun(unittest.TestCase):
    """Run unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Run:
        """Test Run
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Run`
        """
        model = Run()
        if include_optional:
            return Run(
                id = '',
                state = 'Running',
                organization_id = '',
                workflow_id = '',
                csm_simulation_run = '',
                generate_name = '',
                workflow_name = '',
                owner_id = '',
                workspace_id = '',
                workspace_key = '',
                runner_id = '',
                solution_id = '',
                run_template_id = '',
                compute_size = '',
                created_at = '',
                dataset_list = [
                    ''
                    ],
                parameters_values = [
                    cosmotech_api.models.run_template_parameter_value.RunTemplateParameterValue(
                        parameter_id = '', 
                        var_type = '', 
                        value = '', )
                    ],
                node_label = '',
                containers = [
                    cosmotech_api.models.run_container.RunContainer(
                        id = '', 
                        name = '', 
                        labels = {
                            'key' : ''
                            }, 
                        env_vars = {
                            'key' : ''
                            }, 
                        image = '', 
                        entrypoint = '', 
                        run_args = [
                            ''
                            ], 
                        dependencies = [
                            ''
                            ], 
                        solution_container = True, 
                        node_label = '', 
                        run_sizing = cosmotech_api.models.container_resource_sizing.ContainerResourceSizing(
                            requests = cosmotech_api.models.container_resource_size_info.ContainerResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), 
                            limits = cosmotech_api.models.container_resource_size_info.ContainerResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), ), 
                        artifacts = [
                            cosmotech_api.models.run_container_artifact.RunContainerArtifact(
                                name = '', 
                                path = '', )
                            ], )
                    ]
            )
        else:
            return Run(
        )
        """

    def testRun(self):
        """Test Run"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
