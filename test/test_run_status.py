# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.run_status import RunStatus

class TestRunStatus(unittest.TestCase):
    """RunStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunStatus:
        """Test RunStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunStatus`
        """
        model = RunStatus()
        if include_optional:
            return RunStatus(
                id = '',
                organization_id = '',
                workspace_id = '',
                runner_id = '',
                workflow_id = '',
                workflow_name = '',
                start_time = '',
                end_time = '',
                phase = '',
                progress = '',
                message = '',
                estimated_duration = 56,
                nodes = [
                    cosmotech_api.models.run_status_node.RunStatusNode(
                        id = '', 
                        name = '', 
                        container_name = '', 
                        outbound_nodes = [
                            ''
                            ], 
                        resources_duration = cosmotech_api.models.run_resource_requested.RunResourceRequested(
                            cpu = 56, 
                            memory = 56, ), 
                        estimated_duration = 56, 
                        host_node_name = '', 
                        message = '', 
                        phase = '', 
                        progress = '', 
                        start_time = '', 
                        end_time = '', )
                    ],
                state = 'Running'
            )
        else:
            return RunStatus(
        )
        """

    def testRunStatus(self):
        """Test RunStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
