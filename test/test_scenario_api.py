# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.2.0
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.api.scenario_api import ScenarioApi


class TestScenarioApi(unittest.TestCase):
    """ScenarioApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ScenarioApi()

    def tearDown(self) -> None:
        pass

    def test_add_or_replace_scenario_parameter_values(self) -> None:
        """Test case for add_or_replace_scenario_parameter_values

        Add (or replace) Parameter Values for the Scenario specified
        """
        pass

    def test_add_scenario_access_control(self) -> None:
        """Test case for add_scenario_access_control

        Add a control access to the Scenario
        """
        pass

    def test_compare_scenarios(self) -> None:
        """Test case for compare_scenarios

        Compare the Scenario with another one and returns the difference for parameters values
        """
        pass

    def test_create_scenario(self) -> None:
        """Test case for create_scenario

        Create a new Scenario
        """
        pass

    def test_delete_all_scenarios(self) -> None:
        """Test case for delete_all_scenarios

        Delete all Scenarios of the Workspace
        """
        pass

    def test_delete_scenario(self) -> None:
        """Test case for delete_scenario

        Delete a scenario
        """
        pass

    def test_download_scenario_data(self) -> None:
        """Test case for download_scenario_data

        Download Scenario data
        """
        pass

    def test_find_all_scenarios(self) -> None:
        """Test case for find_all_scenarios

        List all Scenarios
        """
        pass

    def test_find_all_scenarios_by_validation_status(self) -> None:
        """Test case for find_all_scenarios_by_validation_status

        List all Scenarios by validation status
        """
        pass

    def test_find_scenario_by_id(self) -> None:
        """Test case for find_scenario_by_id

        Get the details of an scenario
        """
        pass

    def test_get_scenario_access_control(self) -> None:
        """Test case for get_scenario_access_control

        Get a control access for the Scenario
        """
        pass

    def test_get_scenario_data_download_job_info(self) -> None:
        """Test case for get_scenario_data_download_job_info

        Get Scenario data download URL
        """
        pass

    def test_get_scenario_permissions(self) -> None:
        """Test case for get_scenario_permissions

        Get the Scenario permission by given role
        """
        pass

    def test_get_scenario_security(self) -> None:
        """Test case for get_scenario_security

        Get the Scenario security information
        """
        pass

    def test_get_scenario_security_users(self) -> None:
        """Test case for get_scenario_security_users

        Get the Scenario security users list
        """
        pass

    def test_get_scenario_validation_status_by_id(self) -> None:
        """Test case for get_scenario_validation_status_by_id

        Get the validation status of an scenario
        """
        pass

    def test_get_scenarios_tree(self) -> None:
        """Test case for get_scenarios_tree

        Get the Scenarios Tree
        """
        pass

    def test_remove_all_scenario_parameter_values(self) -> None:
        """Test case for remove_all_scenario_parameter_values

        Remove all Parameter Values from the Scenario specified
        """
        pass

    def test_remove_scenario_access_control(self) -> None:
        """Test case for remove_scenario_access_control

        Remove the specified access from the given Organization Scenario
        """
        pass

    def test_set_scenario_default_security(self) -> None:
        """Test case for set_scenario_default_security

        Set the Scenario default security
        """
        pass

    def test_update_scenario(self) -> None:
        """Test case for update_scenario

        Update a scenario
        """
        pass

    def test_update_scenario_access_control(self) -> None:
        """Test case for update_scenario_access_control

        Update the specified access to User for a Scenario
        """
        pass


if __name__ == '__main__':
    unittest.main()
