# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.dataset import Dataset

class TestDataset(unittest.TestCase):
    """Dataset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dataset:
        """Test Dataset
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dataset`
        """
        model = Dataset()
        if include_optional:
            return Dataset(
                id = '',
                name = '',
                description = '',
                owner_id = '',
                owner_name = '',
                organization_id = '',
                parent_id = '',
                linked_workspace_id_list = [
                    ''
                    ],
                twingraph_id = '',
                main = True,
                creation_date = 56,
                refresh_date = 56,
                source_type = 'ADT',
                source = cosmotech_api.models.source_info.SourceInfo(
                    name = '', 
                    location = '', 
                    path = '', 
                    job_id = '', ),
                ingestion_status = 'NONE',
                twincache_status = 'EMPTY',
                queries = [
                    ''
                    ],
                tags = [
                    ''
                    ],
                connector = cosmotech_api.models.dataset_connector.Dataset_connector(
                    id = '', 
                    name = '', 
                    version = '', 
                    parameters_values = {
                        'key' : ''
                        }, ),
                fragments_ids = [
                    ''
                    ],
                validator_id = '',
                compatibility = [
                    cosmotech_api.models.dataset_compatibility.DatasetCompatibility(
                        solution_key = '', 
                        minimum_version = '', 
                        maximum_version = '', )
                    ],
                security = cosmotech_api.models.dataset_security.DatasetSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.dataset_access_control.DatasetAccessControl(
                            id = '', 
                            role = '', )
                        ], )
            )
        else:
            return Dataset(
        )
        """

    def testDataset(self):
        """Test Dataset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
