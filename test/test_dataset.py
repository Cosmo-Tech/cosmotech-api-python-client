# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 5.0.0-beta3
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.dataset import Dataset

class TestDataset(unittest.TestCase):
    """Dataset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dataset:
        """Test Dataset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dataset`
        """
        model = Dataset()
        if include_optional:
            return Dataset(
                id = 'd-HqXzyCBw3_uufVPI',
                name = '0',
                description = '',
                organization_id = '',
                workspace_id = '',
                tags = [
                    ''
                    ],
                parts = [
                    cosmotech_api.models.dataset_part.DatasetPart(
                        id = 'dp-HqXzyCBw3_uufVPI', 
                        name = '0', 
                        source_name = '0', 
                        description = '', 
                        tags = [
                            ''
                            ], 
                        type = 'Relational', 
                        organization_id = '', 
                        workspace_id = '', 
                        dataset_id = '', 
                        create_info = null, 
                        update_info = null, )
                    ],
                create_info = cosmotech_api.models.create_info.CreateInfo(
                    timestamp = 56, 
                    user_id = '', 
                    runner_id = 'r-HqXzyCBw3_uufVPI', ),
                update_info = cosmotech_api.models.edit_info.EditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                security = cosmotech_api.models.dataset_security.DatasetSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.dataset_access_control.DatasetAccessControl(
                            id = '', 
                            role = '', )
                        ], )
            )
        else:
            return Dataset(
                id = 'd-HqXzyCBw3_uufVPI',
                name = '0',
                organization_id = '',
                workspace_id = '',
                tags = [
                    ''
                    ],
                parts = [
                    cosmotech_api.models.dataset_part.DatasetPart(
                        id = 'dp-HqXzyCBw3_uufVPI', 
                        name = '0', 
                        source_name = '0', 
                        description = '', 
                        tags = [
                            ''
                            ], 
                        type = 'Relational', 
                        organization_id = '', 
                        workspace_id = '', 
                        dataset_id = '', 
                        create_info = null, 
                        update_info = null, )
                    ],
                create_info = cosmotech_api.models.create_info.CreateInfo(
                    timestamp = 56, 
                    user_id = '', 
                    runner_id = 'r-HqXzyCBw3_uufVPI', ),
                update_info = cosmotech_api.models.edit_info.EditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                security = cosmotech_api.models.dataset_security.DatasetSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.dataset_access_control.DatasetAccessControl(
                            id = '', 
                            role = '', )
                        ], ),
        )
        """

    def testDataset(self):
        """Test Dataset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
