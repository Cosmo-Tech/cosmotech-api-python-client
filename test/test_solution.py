# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 5.0.0-beta3
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.solution import Solution

class TestSolution(unittest.TestCase):
    """Solution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Solution:
        """Test Solution
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Solution`
        """
        model = Solution()
        if include_optional:
            return Solution(
                id = 'sol-123456aBcDeF',
                organization_id = 'o-123456aBcDeF',
                key = 'brewery-solution',
                name = 'Brewery Solution',
                description = 'A solution for brewery management and optimization',
                repository = 'cosmotech/brewery_solution',
                always_pull = True,
                version = '1.0.0',
                create_info = cosmotech_api.models.solution_edit_info.SolutionEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                update_info = cosmotech_api.models.solution_edit_info.SolutionEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                sdk_version = '11.3.0-39929.27365ede',
                url = 'https://github.com/Cosmo-Tech/brewery-solution',
                tags = ["brewery","optimization"],
                parameters = [
                    cosmotech_api.models.run_template_parameter.RunTemplateParameter(
                        id = '0', 
                        description = '', 
                        labels = {
                            'key' : ''
                            }, 
                        var_type = '0', 
                        default_value = '', 
                        min_value = '', 
                        max_value = '', 
                        regex_validation = '', 
                        options = { }, )
                    ],
                parameter_groups = [
                    cosmotech_api.models.run_template_parameter_group.RunTemplateParameterGroup(
                        id = '0', 
                        description = '', 
                        labels = {
                            'key' : ''
                            }, 
                        is_table = True, 
                        options = { }, 
                        parent_id = '', 
                        parameters = [
                            ''
                            ], )
                    ],
                run_templates = [
                    cosmotech_api.models.run_template.RunTemplate(
                        id = 'template-123', 
                        name = '0', 
                        labels = {
                            'key' : ''
                            }, 
                        description = '', 
                        tags = [
                            ''
                            ], 
                        compute_size = '', 
                        run_sizing = cosmotech_api.models.run_template_resource_sizing.RunTemplateResourceSizing(
                            requests = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), 
                            limits = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), ), 
                        parameter_groups = [
                            ''
                            ], 
                        execution_timeout = 56, )
                    ],
                security = cosmotech_api.models.solution_security.SolutionSecurity(
                    default = 'none', 
                    access_control_list = [
                        cosmotech_api.models.solution_access_control.SolutionAccessControl(
                            id = 'user@company.com', 
                            role = 'editor', )
                        ], )
            )
        else:
            return Solution(
                id = 'sol-123456aBcDeF',
                organization_id = 'o-123456aBcDeF',
                key = 'brewery-solution',
                name = 'Brewery Solution',
                repository = 'cosmotech/brewery_solution',
                version = '1.0.0',
                create_info = cosmotech_api.models.solution_edit_info.SolutionEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                update_info = cosmotech_api.models.solution_edit_info.SolutionEditInfo(
                    timestamp = 56, 
                    user_id = '', ),
                parameters = [
                    cosmotech_api.models.run_template_parameter.RunTemplateParameter(
                        id = '0', 
                        description = '', 
                        labels = {
                            'key' : ''
                            }, 
                        var_type = '0', 
                        default_value = '', 
                        min_value = '', 
                        max_value = '', 
                        regex_validation = '', 
                        options = { }, )
                    ],
                parameter_groups = [
                    cosmotech_api.models.run_template_parameter_group.RunTemplateParameterGroup(
                        id = '0', 
                        description = '', 
                        labels = {
                            'key' : ''
                            }, 
                        is_table = True, 
                        options = { }, 
                        parent_id = '', 
                        parameters = [
                            ''
                            ], )
                    ],
                run_templates = [
                    cosmotech_api.models.run_template.RunTemplate(
                        id = 'template-123', 
                        name = '0', 
                        labels = {
                            'key' : ''
                            }, 
                        description = '', 
                        tags = [
                            ''
                            ], 
                        compute_size = '', 
                        run_sizing = cosmotech_api.models.run_template_resource_sizing.RunTemplateResourceSizing(
                            requests = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), 
                            limits = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), ), 
                        parameter_groups = [
                            ''
                            ], 
                        execution_timeout = 56, )
                    ],
                security = cosmotech_api.models.solution_security.SolutionSecurity(
                    default = 'none', 
                    access_control_list = [
                        cosmotech_api.models.solution_access_control.SolutionAccessControl(
                            id = 'user@company.com', 
                            role = 'editor', )
                        ], ),
        )
        """

    def testSolution(self):
        """Test Solution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
