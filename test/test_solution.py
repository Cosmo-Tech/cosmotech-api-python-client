# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.solution import Solution

class TestSolution(unittest.TestCase):
    """Solution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Solution:
        """Test Solution
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Solution`
        """
        model = Solution()
        if include_optional:
            return Solution(
                id = '',
                organization_id = '',
                key = '',
                name = '',
                description = '',
                repository = '',
                always_pull = True,
                csm_simulator = '',
                version = '',
                owner_id = '',
                sdk_version = '',
                url = '',
                tags = [
                    ''
                    ],
                parameters = [
                    cosmotech_api.models.run_template_parameter.RunTemplateParameter(
                        id = '', 
                        labels = {
                            'key' : ''
                            }, 
                        var_type = '', 
                        default_value = '', 
                        min_value = '', 
                        max_value = '', 
                        regex_validation = '', 
                        options = { }, )
                    ],
                parameter_groups = [
                    cosmotech_api.models.run_template_parameter_group.RunTemplateParameterGroup(
                        id = '', 
                        labels = {
                            'key' : ''
                            }, 
                        is_table = True, 
                        options = { }, 
                        parent_id = '', 
                        parameters = [
                            ''
                            ], )
                    ],
                run_templates = [
                    cosmotech_api.models.run_template.RunTemplate(
                        id = '', 
                        name = '', 
                        labels = {
                            'key' : ''
                            }, 
                        description = '', 
                        csm_simulation = '', 
                        tags = [
                            ''
                            ], 
                        compute_size = '', 
                        run_sizing = cosmotech_api.models.run_template_resource_sizing.RunTemplateResourceSizing(
                            requests = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), 
                            limits = cosmotech_api.models.resource_size_info.ResourceSizeInfo(
                                cpu = '', 
                                memory = '', ), ), 
                        no_data_ingestion_state = True, 
                        fetch_datasets = True, 
                        scenario_data_download_transform = True, 
                        fetch_scenario_parameters = True, 
                        apply_parameters = True, 
                        validate_data = True, 
                        send_datasets_to_data_warehouse = True, 
                        send_input_parameters_to_data_warehouse = True, 
                        pre_run = True, 
                        run = True, 
                        post_run = True, 
                        parameters_json = True, 
                        parameters_handler_source = 'cloud', 
                        dataset_validator_source = 'cloud', 
                        pre_run_source = 'cloud', 
                        run_source = 'cloud', 
                        post_run_source = 'cloud', 
                        scenariodata_transform_source = 'cloud', 
                        parameter_groups = [
                            ''
                            ], 
                        stack_steps = True, 
                        git_repository_url = '', 
                        git_branch_name = '', 
                        run_template_source_dir = '', 
                        orchestrator_type = 'argoWorkflow', 
                        execution_timeout = 56, 
                        delete_historical_data = cosmotech_api.models.delete_historical_data.DeleteHistoricalData(
                            enable = True, 
                            poll_frequency = 56, 
                            time_out = 56, ), )
                    ],
                security = cosmotech_api.models.solution_security.SolutionSecurity(
                    default = '', 
                    access_control_list = [
                        cosmotech_api.models.solution_access_control.SolutionAccessControl(
                            id = '', 
                            role = '', )
                        ], )
            )
        else:
            return Solution(
        )
        """

    def testSolution(self):
        """Test Solution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
