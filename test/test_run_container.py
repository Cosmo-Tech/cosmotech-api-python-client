# coding: utf-8

"""
    Cosmo Tech Platform API

    Cosmo Tech Platform API

    The version of the OpenAPI document: 3.2.0
    Contact: platform@cosmotech.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cosmotech_api.models.run_container import RunContainer

class TestRunContainer(unittest.TestCase):
    """RunContainer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunContainer:
        """Test RunContainer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunContainer`
        """
        model = RunContainer()
        if include_optional:
            return RunContainer(
                id = '',
                name = '',
                labels = {
                    'key' : ''
                    },
                env_vars = {
                    'key' : ''
                    },
                image = '',
                entrypoint = '',
                run_args = [
                    ''
                    ],
                dependencies = [
                    ''
                    ],
                solution_container = True,
                node_label = '',
                run_sizing = cosmotech_api.models.container_resource_sizing.ContainerResourceSizing(
                    requests = cosmotech_api.models.container_resource_size_info.ContainerResourceSizeInfo(
                        cpu = '', 
                        memory = '', ), 
                    limits = cosmotech_api.models.container_resource_size_info.ContainerResourceSizeInfo(
                        cpu = '', 
                        memory = '', ), ),
                artifacts = [
                    cosmotech_api.models.run_container_artifact.RunContainerArtifact(
                        name = '', 
                        path = '', )
                    ]
            )
        else:
            return RunContainer(
                name = '',
                image = '',
        )
        """

    def testRunContainer(self):
        """Test RunContainer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
